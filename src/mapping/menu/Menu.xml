<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="moka.menu.dao.MenuDao">
    <insert id="insert" parameterType="moka.menu.bo.Menu" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_menu (
          id,createDate, updateDate, state, name, link, icon, parentId, isRoot, type
        ) VALUES ( #{id},#{createDate},#{updateDate},#{state},#{name},#{link},#{icon},#{parentId},#{isRoot},#{type});

        <selectKey keyProperty="id" order="BEFORE" resultType="String">
            select $uuid()
        </selectKey>
    </insert>

    <!--查询父级下所有的子集-->
    <select id="findAllMenu" parameterType="String" resultMap="menu_map" useCache="true">
        SELECT * FROM t_menu m WHERE m.id = #{id} AND m.state != 1;
    </select>

    <select id="findOne" parameterType="String" resultType="moka.menu.to.MenuTo">
        SELECT * FROM t_menu WHERE id = #{id};
    </select>

    <select id="findList" parameterType="moka.menu.vo.MenuVo" resultType="moka.menu.to.MenuTo">
        SELECT * FROM t_menu m WHERE 1=1 AND m.state != 1;
    </select>

    <update id="update" parameterType="moka.menu.vo.MenuVo">
      UPDATE t_menu m

        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''"> m.name = #{name}, </if>

            <if test="type == 0">
                m.link = "",
                <if test="icon != null and icon != ''"> m.icon = #{icon}, </if>
            </if>
            <if test="type == 1 or type == 2">
                m.icon = "",
                <if test="link != null and link != ''"> m.link = #{link}, </if>
            </if>
            <if test="updateDate != null"> m.updateDate = #{updateDate}, </if>
        </trim>

      WHERE menu.id = #{id};
    </update>

    <!--查询子集-->
    <select id="findNextChild" parameterType="moka.menu.vo.MenuVo" resultType="moka.menu.to.MenuTo" useCache="true">
        SELECT * FROM t_menu menu WHERE menu.parentId = #{id};
    </select>

    <delete id="delete" parameterType="String">
        DELETE FROM t_menu menu WHERE menu.id = #{id};
    </delete>

    <!-- 返回结果集 -->
    <resultMap type="moka.menu.to.MenuTo" id="menu_map">
        <id column="id" property="id"/>
        <collection property="childList" column="id" ofType="moka.menu.to.MenuTo" select="findMenuByParentId"/>
    </resultMap>

    <!-- 根据父键查询 -->
    <select id="findMenuByParentId" parameterType="String" resultMap="menu_map" useCache="true">
        select * from t_menu m where m.parentId=#{id} AND m.state != 1;
    </select>

    <!--获取角色拥有的菜单-->
    <select id="findMenuByRoleId" parameterType="String" resultType="moka.menu.to.MenuTo" useCache="true">
        SELECT m.*,mr.roleId FROM r_menu_role mr LEFT JOIN t_menu m ON m.id= mr.menuId WHERE mr.roleId = #{roleId} ORDER BY m.isRoot DESC
    </select>

    <!--返回用户的菜单-->
    <!--<select id="findMenuByUserId" parameterType="String" resultType="moka.menu.to.MenuTo">
        SELECT * FROM (SELECT mr.menuId, ru.roleId, ru.userId, count(distinct mr.menuId) as c from r_menu_role mr LEFT JOIN r_role_user ru ON mr.roleId = ru.roleId WHERE ru.userId = #{userId} GROUP BY mr.menuId) as mm LEFT JOIN t_menu m ON m.id = mm.menuId
    </select>-->
    <select id="findMenuByUserId" parameterType="String" resultType="moka.menu.to.MenuTo" useCache="true">
        SELECT * FROM (SELECT mr.menuId, ruc.roleId, ruc.userId, count(distinct mr.menuId) as c from r_menu_role mr LEFT JOIN r_role_user_company ruc ON mr.roleId = ruc.roleId WHERE ruc.userId = #{userId} GROUP BY mr.menuId) as mm LEFT JOIN t_menu m ON m.id = mm.menuId ORDER BY m.order ASC
    </select>

</mapper>